{
    "m1": "import subprocess, sys, time, platform, os, hashlib, time, datetime, json, webbrowser
from keyauth import api
from time import sleep
from datetime import datetime

if sys.version_info.minor < 10:
    print("[Security] - Python 3.10 or higher is recommended. The bypass will not work on 3.10+")
    print("You are using Python {}.{}".format(sys.version_info.major, sys.version_info.minor))

if platform.system() == 'Windows':
    os.system('cls & title Electronics Today')
elif platform.system() == 'Linux':
    os.system('clear')
    sys.stdout.write("\x1b]0;Electronics Today\x07")
elif platform.system() == 'Darwin':
    os.system("clear && printf '\e[3J'")
    os.system('''echo - n - e "\033]0;Electronics Today\007"''')

print("Initializing")


def getchecksum():
    md5_hash = hashlib.md5()
    file = open(''.join(sys.argv), "rb")
    md5_hash.update(file.read())
    digest = md5_hash.hexdigest()
    return digest


keyauthapp = api(
    name = "ETSpoof",
    ownerid = "tmCeaFXCLq",
    secret = "811b7bc15892cb03d6fbb97652de93002cf6ceba352c2c49f67a7ea0f9f1f5a2",
    version = "1.0",
    hash_to_check = getchecksum()
)

print(f"""
App data:
Number of users: {keyauthapp.app_data.numUsers}
Number of online users: {keyauthapp.app_data.onlineUsers}
Number of keys: {keyauthapp.app_data.numKeys}
Application Version: {keyauthapp.app_data.app_ver}
Customer panel link: {keyauthapp.app_data.customer_panel}
""")
print(f"Current Session Validation Status: {keyauthapp.check()}")
print(f"Blacklisted? : {keyauthapp.checkblacklist()}")  # check if blacklisted, you can edit this and make it exit the program if blacklisted

time.sleep(5)
if platform.system() == 'Windows':
    os.system('cls & title Electronics Today')
elif platform.system() == 'Linux':
    os.system('clear')
    sys.stdout.write("\x1b]0;Electronics Today\x07")
elif platform.system() == 'Darwin':
    os.system("clear && printf '\e[3J'")
    os.system('''echo - n - e "\033]0;Electronics Today\007"''')


def answer():
    try:
        print("""
1.Login
2.Register
3.Upgrade
4.License Key Only
        """)
        ans = input("Select Option: ")
        if ans == "1":
            user = input('Provide username: ')
            password = input('Provide password: ')
            keyauthapp.login(user, password)
        elif ans == "2":
            user = input('Provide username: ')
            password = input('Provide password: ')
            license = input('Provide License: ')
            keyauthapp.register(user, password, license)
        elif ans == "3":
            user = input('Provide username: ')
            license = input('Provide License: ')
            keyauthapp.upgrade(user, license)
        elif ans == "4":
            key = input('Enter your license: ')
            keyauthapp.license(key)
        else:
            print("\nNot Valid Option")
            time.sleep(1)
            os.system('cls')
            answer()
    except KeyboardInterrupt:
        os._exit(1)


answer()

'''try:
    if os.path.isfile('auth.json'): #Checking if the auth file exist
        if jsond.load(open("auth.json"))["authusername"] == "": #Checks if the authusername is empty or not
            print("""
1. Login
2. Register
            """)
            ans=input("Select Option: ")  #Skipping auto-login bc auth file is empty
            if ans=="1": 
                user = input('Provide username: ')
                password = input('Provide password: ')
                keyauthapp.login(user,password)
                authfile = jsond.load(open("auth.json"))
                authfile["authusername"] = user
                authfile["authpassword"] = password
                jsond.dump(authfile, open('auth.json', 'w'), sort_keys=False, indent=4)
            elif ans=="2":
                user = input('Provide username: ')
                password = input('Provide password: ')
                license = input('Provide License: ')
                keyauthapp.register(user,password,license) 
                authfile = jsond.load(open("auth.json"))
                authfile["authusername"] = user
                authfile["authpassword"] = password
                jsond.dump(authfile, open('auth.json', 'w'), sort_keys=False, indent=4)
            else:
                print("\nNot Valid Option") 
                os._exit(1) 
        else:
            try: #2. Auto login
                with open('auth.json', 'r') as f:
                    authfile = jsond.load(f)
                    authuser = authfile.get('authusername')
                    authpass = authfile.get('authpassword')
                    keyauthapp.login(authuser,authpass)
            except Exception as e: #Error stuff
                print(e)
    else: #Creating auth file bc its missing
        try:
            f = open("auth.json", "a") #Writing content
            f.write("""{
    "authusername": "",
    "authpassword": ""
}""")
            f.close()
            print ("""
1. Login
2. Register
            """)#Again skipping auto-login bc the file is empty/missing
            ans=input("Select Option: ") 
            if ans=="1": 
                user = input('Provide username: ')
                password = input('Provide password: ')
                keyauthapp.login(user,password)
                authfile = jsond.load(open("auth.json"))
                authfile["authusername"] = user
                authfile["authpassword"] = password
                jsond.dump(authfile, open('auth.json', 'w'), sort_keys=False, indent=4)
            elif ans=="2":
                user = input('Provide username: ')
                password = input('Provide password: ')
                license = input('Provide License: ')
                keyauthapp.register(user,password,license)
                authfile = jsond.load(open("auth.json"))
                authfile["authusername"] = user
                authfile["authpassword"] = password
                jsond.dump(authfile, open('auth.json', 'w'), sort_keys=False, indent=4)
            else:
                print("\nNot Valid Option") 
                os._exit(1) 
        except Exception as e: #Error stuff
            print(e)
            os._exit(1) 
except Exception as e: #Error stuff
    print(e)
    os._exit(1)'''


print("\nUser data: ")
print("Username: " + keyauthapp.user_data.username)
print("IP address: " + keyauthapp.user_data.ip)
print("Hardware-Id: " + keyauthapp.user_data.hwid)

subs = keyauthapp.user_data.subscriptions
for i in range(len(subs)):
    sub = subs[i]["subscription"]
    expiry = datetime.utcfromtimestamp(int(subs[i]["expiry"])).strftime(
        '%Y-%m-%d %H:%M:%S')  # Expiry date from every Sub
    timeleft = subs[i]["timeleft"]  # Timeleft from every Sub

    print(f"[{i + 1} / {len(subs)}] | Subscription: {sub} - Expiry: {expiry} - Timeleft: {timeleft}")

onlineUsers = keyauthapp.fetchOnline()
OU = ""  # KEEP THIS EMPTY FOR NOW, THIS WILL BE USED TO CREATE ONLINE USER STRING.
if onlineUsers is None:
    OU = "No online users"
else:
    for i in range(len(onlineUsers)):
        OU += onlineUsers[i]["credential"] + " "

print("\n" + OU + "\n")
time.sleep(5)
if platform.system() == 'Windows':
    os.system('cls & title Electronics Today')
elif platform.system() == 'Linux':
    os.system('clear')
    sys.stdout.write("\x1b]0;Electronics Today\x07")
elif platform.system() == 'Darwin':
    os.system("clear && printf '\e[3J'")
    os.system('''echo - n - e "\033]0;Electronics Today\007"''')
print("Created at: " + datetime.utcfromtimestamp(int(keyauthapp.user_data.createdate)).strftime('%Y-%m-%d %H:%M:%S'))
print("Last login at: " + datetime.utcfromtimestamp(int(keyauthapp.user_data.lastlogin)).strftime('%Y-%m-%d %H:%M:%S'))
print("Expires at: " + datetime.utcfromtimestamp(int(keyauthapp.user_data.expires)).strftime('%Y-%m-%d %H:%M:%S'))
print(f"Current Session Validation Status: {keyauthapp.check()}")
print("Starting in 5 seconds.")
sleep(5)
VM_Name = input("What is the EXACT name of your VM you created?  ")
time.sleep(1)
script = """
$systemPath = "C:\Windows\System32\"
$driverPath = "C:\Windows\System32\DriverStore\FileRepository\"

# check if script is admin
$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
if( $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) ) {
    
    # do we need guest vm privs? enable it
    Get-VM -Name $vm | Get-VMIntegrationService | ? {-not($_.Enabled)} | Enable-VMIntegrationService -Verbose
    
    # aggregate and copy files to driverstore
    $localDriverFolder = ""
    Get-ChildItem $driverPath -recurse | Where-Object {$_.PSIsContainer -eq $true -and $_.Name -match "nv_dispi.inf_amd64_*"} | Sort-Object -Descending -Property LastWriteTime | select -First 1 |
    ForEach-Object {
        if ($localDriverFolder -eq "") {
            $localDriverFolder = $_.Name                                  
            }
    }

    Write-Host $localDriverFolder

    Get-ChildItem $driverPath$localDriverFolder -recurse | Where-Object {$_.PSIsContainer -eq $false} |
    Foreach-Object {
        $sourcePath = $_.FullName
        $destinationPath = $sourcePath -replace "^C\:\\Windows\\System32\\DriverStore\\","C:\Temp\System32\HostDriverStore\"
        Copy-VMFile $vm -SourcePath $sourcePath -DestinationPath $destinationPath -Force -CreateFullPath -FileSource Host
    }

    # get all files related to NV*.* in system32
    Get-ChildItem $systemPath  | Where-Object {$_.Name -like "NV*"} |
    ForEach-Object {
        $sourcePath = $_.FullName
        $destinationPath = $sourcePath -replace "^C\:\\Windows\\System32\\","C:\Temp\System32\"
        Copy-VMFile $vm -SourcePath $sourcePath -DestinationPath $destinationPath -Force -CreateFullPath -FileSource Host
    }

    Write-Host "Success! Please go to C:\Temp and copy the files where they are expected within the VM."

} else {
    Write-Host "This PowerShell Script must be run with Administrative Privileges or nothing will work."
}
"""

f = open("dontdelete.ps1", "w")
f.write("$vm = '" + VM_Name + "'")
f.close()

f = open("dontdelete.ps1", "a")
f.write(script)
f.close()
p = subprocess.Popen('powershell.exe -ExecutionPolicy RemoteSigned -file "dontdelete.ps1"', stdout=sys.stdout)
p.communicate()
print('When powershell is done click enter.')
print('if you get an error saying you might have errors running it go to dontdelete.ps1, copy everything, open powershell has admin, and then ctrl + v, and click enter.')
os.system('pause')

if platform.system() == 'Windows':
    os.system('cls & title Electronics Today')
elif platform.system() == 'Linux':
    os.system('clear')
    sys.stdout.write("\x1b]0;Electronics Today\x07")
elif platform.system() == 'Darwin':
    os.system("clear && printf '\e[3J'")
    os.system('''echo - n - e "\033]0;Electronics Today\007"''')

print('Alright!')

script1 = """
$systemPath = "C:\Windows\System32\"
$driverPath = "C:\Windows\System32\DriverStore\FileRepository\"

# check if script is admin
$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
if( $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator) ) {
    
    # do we need guest vm privs? enable it
    Get-VM -Name $vm | Get-VMIntegrationService | ? {-not($_.Enabled)} | Enable-VMIntegrationService -Verbose
    
    # aggregate and copy files to driverstore
    $localDriverFolder = ""
    Get-ChildItem $driverPath -recurse | Where-Object {$_.PSIsContainer -eq $true -and $_.Name -match "nv_dispi.inf_amd64_*"} | Sort-Object -Descending -Property LastWriteTime | select -First 1 |
    ForEach-Object {
        if ($localDriverFolder -eq "") {
            $localDriverFolder = $_.Name                                  
            }
    }

    Write-Host $localDriverFolder

    Get-ChildItem $driverPath$localDriverFolder -recurse | Where-Object {$_.PSIsContainer -eq $false} |
    Foreach-Object {
        $sourcePath = $_.FullName
        $destinationPath = $sourcePath -replace "^C\:\\Windows\\System32\\DriverStore\\","C:\Temp\System32\HostDriverStore\"
        Copy-VMFile $vm -SourcePath $sourcePath -DestinationPath $destinationPath -Force -CreateFullPath -FileSource Host
    }

    # get all files related to NV*.* in system32
    Get-ChildItem $systemPath  | Where-Object {$_.Name -like "NV*"} |
    ForEach-Object {
        $sourcePath = $_.FullName
        $destinationPath = $sourcePath -replace "^C\:\\Windows\\System32\\","C:\Temp\System32\"
        Copy-VMFile $vm -SourcePath $sourcePath -DestinationPath $destinationPath -Force -CreateFullPath -FileSource Host
    }

    Write-Host "Success! Please go to C:\Temp and copy the files where they are expected within the VM."

} else {
    Write-Host "This PowerShell Script must be run with Administrative Privileges or nothing will work."
}
"""

f = open("gpu-p.ps1", "w")
f.write("$vm = '" + VM_Name + "'")
f.close()

f = open("gpu-p.ps1", "a")
f.write(script1)
f.close()
p = subprocess.Popen('powershell.exe -ExecutionPolicy RemoteSigned -file "gpu-p.ps1"', stdout=sys.stdout)
p.communicate()
print('When powershell is done click enter.')
print('if you get an error saying you might have errors running it go to gpu-p.ps1, copy everything, open powershell has admin, and then ctrl + v, and click enter.')
os.system('pause')

if platform.system() == 'Windows':
    os.system('cls & title Electronics Today')
elif platform.system() == 'Linux':
    os.system('clear')
    sys.stdout.write("\x1b]0;Electronics Today\x07")
elif platform.system() == 'Darwin':
    os.system("clear && printf '\e[3J'")
    os.system('''echo - n - e "\033]0;Electronics Today\007"''')

print('Move all your game files to the VM by going to the VM directory (check this in Hyper-V Manager - Your VM - Settings - Hard Drive - Virtual Hard Disk).')
print('Mount the hardisk we got above to your PC.')
print('Then copy or cut all your GTA game files to it.')
print('When you are done click enter.')

os.system('pause')

if platform.system() == 'Windows':
    os.system('cls & title Electronics Today')
elif platform.system() == 'Linux':
    os.system('clear')
    sys.stdout.write("\x1b]0;Electronics Today\x07")
elif platform.system() == 'Darwin':
    os.system("clear && printf '\e[3J'")
    os.system('''echo - n - e "\033]0;Electronics Today\007"''')

print('Do the same for EVERYTHING in the apps folder, after that install all those things before running FiveM.')
print('After you do that if FiveM does not work install Rockstar, Steam, or whatever you used.')

print('And boom! FiveM should be working.')
print('Use the menu below :)')
print('it will show after you click enter.')
os.system('pause')

if platform.system() == 'Windows':
    os.system('cls & title Electronics Today')
elif platform.system() == 'Linux':
    os.system('clear')
    sys.stdout.write("\x1b]0;Electronics Today\x07")
elif platform.system() == 'Darwin':
    os.system("clear && printf '\e[3J'")
    os.system('''echo - n - e "\033]0;Electronics Today\007"''')

ans=True
while ans:
    print("""
    1. Join Discord
    2. Go to store
    3. Exit
    """)
    ans=input("What would you like to do?  ")
    if ans=="1": 
      webbrowser.open('https://discord.gg/EYhrDz4Cbh') 
    elif ans=="2":
      webbrowser.open('https://electronicstoday.shop') 
    elif ans=="3":
      exit()
    elif ans !="":
      print("\n Not Valid Choice Try again") ",
    "m3": "U1RPUCE="
}
